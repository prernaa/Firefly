type token =
  | INTEGER of (int)
  | FLOAT of (float)
  | ASSIGN
  | PLUS
  | MINUS
  | ON
  | OFF
  | EOF
  | VEC2 of ((float * float))
  | IDENTIFIER of (string)

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 18 "parser.ml"
let yytransl_const = [|
  259 (* ASSIGN *);
  260 (* PLUS *);
  261 (* MINUS *);
  262 (* ON *);
  263 (* OFF *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INTEGER *);
  258 (* FLOAT *);
  264 (* VEC2 *);
  265 (* IDENTIFIER *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\005\000\005\000\000\000"

let yylen = "\002\000\
\001\000\000\000\002\000\001\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\002\000\002\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\016\000\000\000\014\000\015\000\000\000\000\000\
\006\000\000\000\003\000\000\000\005\000\012\000\013\000\000\000\
\000\000\000\000\000\000\000\000\009\000\000\000\000\000"

let yydgoto = "\002\000\
\003\000\004\000\011\000\012\000\013\000"

let yysindex = "\255\255\
\000\000\000\000\000\000\023\255\000\000\000\000\012\255\012\255\
\000\000\004\255\000\000\002\255\000\000\000\000\000\000\023\255\
\023\255\023\255\023\255\002\255\000\000\002\255\002\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\012\000\000\000\021\000\023\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\242\255\008\000"

let yytablesize = 288
let yytable = "\001\000\
\007\000\020\000\021\000\022\000\023\000\017\000\016\000\018\000\
\019\000\004\000\001\000\008\000\005\000\006\000\014\000\015\000\
\000\000\000\000\000\000\000\000\010\000\000\000\011\000\005\000\
\006\000\000\000\007\000\008\000\000\000\000\000\009\000\010\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\007\000\000\000\007\000\007\000\007\000\007\000\
\007\000\007\000\004\000\004\000\008\000\008\000\004\000\000\000\
\008\000\004\000\004\000\008\000\008\000\010\000\010\000\011\000\
\011\000\010\000\000\000\011\000\010\000\010\000\011\000\011\000"

let yycheck = "\001\000\
\000\000\016\000\017\000\018\000\019\000\004\001\003\001\006\001\
\007\001\000\000\000\000\000\000\001\001\002\001\007\000\008\000\
\255\255\255\255\255\255\255\255\000\000\255\255\000\000\001\001\
\002\001\255\255\004\001\005\001\255\255\255\255\008\001\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\255\255\004\001\005\001\006\001\007\001\
\008\001\009\001\001\001\002\001\001\001\002\001\005\001\255\255\
\005\001\008\001\009\001\008\001\009\001\001\001\002\001\001\001\
\002\001\005\001\255\255\005\001\008\001\009\001\008\001\009\001"

let yynames_const = "\
  ASSIGN\000\
  PLUS\000\
  MINUS\000\
  ON\000\
  OFF\000\
  EOF\000\
  "

let yynames_block = "\
  INTEGER\000\
  FLOAT\000\
  VEC2\000\
  IDENTIFIER\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 21 "parser.mly"
           ( List.rev _1 )
# 164 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 24 "parser.mly"
                      ( [] )
# 170 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 25 "parser.mly"
                   ( (_2 :: _1) )
# 178 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 28 "parser.mly"
             ( Expr(_1) )
# 185 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 31 "parser.mly"
                ( Constant(_1) )
# 192 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (float * float)) in
    Obj.repr(
# 32 "parser.mly"
                ( Vec2(fst(_1),snd(_1)) )
# 199 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 33 "parser.mly"
                     ( Identifier(_1) )
# 206 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 34 "parser.mly"
                              ( Assign (_1, _3))
# 214 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 35 "parser.mly"
                         ( Binop(_1, Add,   _3) )
# 222 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 36 "parser.mly"
                       ( Binop(_1, On,   _3) )
# 230 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 37 "parser.mly"
                       ( Binop(_1, Off,   _3) )
# 238 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 38 "parser.mly"
                                ( Constant(_2) )
# 245 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 39 "parser.mly"
                                 ( NegConstant(_2) )
# 252 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 42 "parser.mly"
                ( Integer(_1) )
# 259 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 43 "parser.mly"
                 ( Float(_1)	)
# 266 "parser.ml"
               : 'constant))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
